{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SUCCESS, AUTH_LOGOUT } from './actionTypes';\nexport function auth(email, password, isLogin) {\n  return async dispatch => {\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo';\n\n    if (isLogin) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo';\n    }\n\n    const response = await axios.post(url, authData);\n    const data = response.data;\n    const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000);\n    localStorage.setItem('token', data.idToken);\n    localStorage.setItem('userId', data.localId);\n    localStorage.setItem('expirationDate', expirationDate);\n    dispatch(authSuccess(data.idToken));\n    dispatch(autoLogout(data.expiresIn));\n  };\n}\nexport function autoLogout(time) {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, time * 1000);\n  };\n}\nexport function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: AUTH_LOGOUT\n  };\n}\nexport function autoLogin() {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(autoLogout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}\nexport function authSuccess(token) {\n  return {\n    type: AUTH_SUCCESS,\n    token\n  };\n}","map":{"version":3,"sources":["/Users/sergeymac/Web/React application /react-quiz(redux)/src/store/actions/auth.js"],"names":["axios","AUTH_SUCCESS","AUTH_LOGOUT","auth","email","password","isLogin","dispatch","authData","returnSecureToken","url","response","post","data","expirationDate","Date","getTime","expiresIn","localStorage","setItem","idToken","localId","authSuccess","autoLogout","time","setTimeout","logout","removeItem","type","autoLogin","token","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,eAAxC;AAEA,OAAO,SAASC,IAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;AAC/C,SAAO,MAAMC,QAAN,IAAkB;AAExB,UAAMC,QAAQ,GAAG;AACPJ,MAAAA,KADO;AACAC,MAAAA,QADA;AAEPI,MAAAA,iBAAiB,EAAE;AAFZ,KAAjB;AAKM,QAAIC,GAAG,GAAG,uGAAV;;AAEA,QAAIJ,OAAJ,EAAa;AACZI,MAAAA,GAAG,GAAG,mHAAN;AAEA;;AAED,UAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAWF,GAAX,EAAgBF,QAAhB,CAAvB;AACA,UAAMK,IAAI,GAAGF,QAAQ,CAACE,IAAtB;AAEA,UAAMC,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,IAAI,CAACI,SAAL,GAAiB,IAAjD,CAAvB;AAEAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,OAAnC;AACAF,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BN,IAAI,CAACQ,OAApC;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AAEAP,IAAAA,QAAQ,CAACe,WAAW,CAACT,IAAI,CAACO,OAAN,CAAZ,CAAR;AACAb,IAAAA,QAAQ,CAACgB,UAAU,CAACV,IAAI,CAACI,SAAN,CAAX,CAAR;AAEN,GA1BD;AA2BA;AAED,OAAO,SAASM,UAAT,CAAoBC,IAApB,EAA0B;AAChC,SAAOjB,QAAQ,IAAI;AAClBkB,IAAAA,UAAU,CAAC,MAAM;AAChBlB,MAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,KAFS,EAEPF,IAAI,GAAG,IAFA,CAAV;AAGA,GAJD;AAKA;AAED,OAAO,SAASE,MAAT,GAAkB;AACxBR,EAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,QAAxB;AACAT,EAAAA,YAAY,CAACS,UAAb,CAAwB,gBAAxB;AACA,SAAO;AACNC,IAAAA,IAAI,EAAE1B;AADA,GAAP;AAGA;AAED,OAAO,SAAS2B,SAAT,GAAqB;AAC3B,SAAOtB,QAAQ,IAAI;AAClB,UAAMuB,KAAK,GAAGZ,YAAY,CAACa,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACXvB,MAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,KAFD,MAEO;AACN,YAAMZ,cAAc,GAAG,IAAIC,IAAJ,CAASG,YAAY,CAACa,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAIjB,cAAc,IAAI,IAAIC,IAAJ,EAAtB,EAAkC;AACjCR,QAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACA,OAFD,MAEO;AACNnB,QAAAA,QAAQ,CAACe,WAAW,CAACQ,KAAD,CAAZ,CAAR;AACAvB,QAAAA,QAAQ,CAACgB,UAAU,CAAC,CAACT,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IAArD,CAAX,CAAR;AACA;AACD;AACD,GAbD;AAcA;AAED,OAAO,SAASM,WAAT,CAAqBQ,KAArB,EAA4B;AAClC,SAAO;AACNF,IAAAA,IAAI,EAAE3B,YADA;AAEN6B,IAAAA;AAFM,GAAP;AAIA","sourcesContent":["import axios from 'axios'\nimport {AUTH_SUCCESS, AUTH_LOGOUT} from './actionTypes'\n\nexport function auth (email, password, isLogin) {\n\treturn async dispatch => {\n\n\t\tconst authData = {\n            email, password,\n            returnSecureToken: true\n        }\n\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo'\n\n        if (isLogin) {\n        \turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo'\n\n        }\n       \n        const response = await axios.post(url, authData)\n        const data = response.data\n\n        const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000)\n\n        localStorage.setItem('token', data.idToken)\n        localStorage.setItem('userId', data.localId)\n        localStorage.setItem('expirationDate', expirationDate)\n\n        dispatch(authSuccess(data.idToken))\n        dispatch(autoLogout(data.expiresIn))\n\n\t}\n}\n\nexport function autoLogout(time) {\n\treturn dispatch => {\n\t\tsetTimeout(() => {\n\t\t\tdispatch(logout())\n\t\t}, time * 1000)\n\t}\n}\n\nexport function logout() {\n\tlocalStorage.removeItem('token')\n\tlocalStorage.removeItem('userId')\n\tlocalStorage.removeItem('expirationDate')\n\treturn {\n\t\ttype: AUTH_LOGOUT\n\t}\n}\n\nexport function autoLogin() {\n\treturn dispatch => {\n\t\tconst token = localStorage.getItem('token')\n\t\tif (!token) {\n\t\t\tdispatch(logout())\n\t\t} else {\n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'))\n\t\t\tif (expirationDate <= new Date()) {\n\t\t\t\tdispatch(logout())\n\t\t\t} else {\n\t\t\t\tdispatch(authSuccess(token))\n\t\t\t\tdispatch(autoLogout((expirationDate.getTime() - new Date().getTime()) / 1000 ))\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function authSuccess(token) {\n\treturn {\n\t\ttype: AUTH_SUCCESS,\n\t\ttoken\n\t}\n}"]},"metadata":{},"sourceType":"module"}