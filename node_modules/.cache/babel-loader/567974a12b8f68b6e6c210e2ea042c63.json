{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SUCCESS } from './actionTypes';\nexport function auth(email, password, isLogin) {\n  return async dispatch => {\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo';\n\n    if (isLogin) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo';\n    }\n\n    const response = await axios.post(url, authData);\n    const data = response.data;\n    const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000);\n    localStorage.setItem('token', data.idToken);\n    localStorage.setItem('userId', data.localId);\n    localStorage.setItem('expirationDate', expirationDate);\n    dispatch(authSuccess());\n  };\n}\nexport function authSuccess(token) {\n  return {\n    type: AUTH_SUCCESS,\n    token\n  };\n}","map":{"version":3,"sources":["/Users/sergeymac/Web/React application /react-quiz(redux)/src/store/actions/auth.js"],"names":["axios","AUTH_SUCCESS","auth","email","password","isLogin","dispatch","authData","returnSecureToken","url","response","post","data","expirationDate","Date","getTime","expiresIn","localStorage","setItem","idToken","localId","authSuccess","token","type"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AAEA,OAAO,SAASC,IAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;AAC/C,SAAO,MAAMC,QAAN,IAAkB;AAExB,UAAMC,QAAQ,GAAG;AACPJ,MAAAA,KADO;AACAC,MAAAA,QADA;AAEPI,MAAAA,iBAAiB,EAAE;AAFZ,KAAjB;AAKM,QAAIC,GAAG,GAAG,uGAAV;;AAEA,QAAIJ,OAAJ,EAAa;AACZI,MAAAA,GAAG,GAAG,mHAAN;AAEA;;AAED,UAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAWF,GAAX,EAAgBF,QAAhB,CAAvB;AACA,UAAMK,IAAI,GAAGF,QAAQ,CAACE,IAAtB;AAEA,UAAMC,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,IAAI,CAACI,SAAL,GAAiB,IAAjD,CAAvB;AAEAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,OAAnC;AACAF,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BN,IAAI,CAACQ,OAApC;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AAEAP,IAAAA,QAAQ,CAACe,WAAW,EAAZ,CAAR;AAEN,GAzBD;AA0BA;AAED,OAAO,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAClC,SAAO;AACNC,IAAAA,IAAI,EAAEtB,YADA;AAENqB,IAAAA;AAFM,GAAP;AAIA","sourcesContent":["import axios from 'axios'\nimport {AUTH_SUCCESS} from './actionTypes'\n\nexport function auth (email, password, isLogin) {\n\treturn async dispatch => {\n\n\t\tconst authData = {\n            email, password,\n            returnSecureToken: true\n        }\n\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo'\n\n        if (isLogin) {\n        \turl = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCbBoRoHs00xHTbFhRuwxba00aAPuNpwQo'\n\n        }\n       \n        const response = await axios.post(url, authData)\n        const data = response.data\n\n        const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000)\n\n        localStorage.setItem('token', data.idToken)\n        localStorage.setItem('userId', data.localId)\n        localStorage.setItem('expirationDate', expirationDate)\n\n        dispatch(authSuccess())\n\n\t}\n}\n\nexport function authSuccess(token) {\n\treturn {\n\t\ttype: AUTH_SUCCESS,\n\t\ttoken\n\t}\n}"]},"metadata":{},"sourceType":"module"}