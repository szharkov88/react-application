{"ast":null,"code":"import axios from '../../axios/axios-quiz';\nimport { FETCH_QUIZES_START, FETCH_QUIZES_SUCCESS, FETCH_QUIZES_ERROR, FETCH_QUIZ_SUCCESS, QUIZ_SET_STATE, FINISH_QUIZ, QUIZ_NEXT_QUESTION, QUIZ_RETRY } from './actionTypes';\nexport function fetchQuizes() {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get('/quizes.json');\n      const quizes = [];\n      Object.keys(response.data).forEach((key, index) => {\n        quizes.push({\n          id: key,\n          name: `Тест №${index + 1}`\n        });\n      });\n      dispatch(fetchQuizesSuccess(quizes));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuizById(quizId) {\n  return async dispatch => {\n    dispatch(fetchQuizesStart());\n\n    try {\n      const response = await axios.get(`/quizes/${quizId}.json`);\n      const quiz = response.data;\n      dispatch(fetchQuizSuccess(quiz));\n    } catch (e) {\n      dispatch(fetchQuizesError(e));\n    }\n  };\n}\nexport function fetchQuizSuccess(quiz) {\n  return {\n    type: FETCH_QUIZ_SUCCESS,\n    quiz\n  };\n}\nexport function fetchQuizesStart() {\n  return {\n    type: FETCH_QUIZES_START\n  };\n}\nexport function fetchQuizesSuccess(quizes) {\n  return {\n    type: FETCH_QUIZES_SUCCESS,\n    quizes: quizes\n  };\n}\nexport function fetchQuizesError(e) {\n  return {\n    type: FETCH_QUIZES_ERROR,\n    error: e\n  };\n}\nexport function quizSetState(answerState, results) {\n  return {\n    type: QUIZ_SET_STATE,\n    answerState,\n    results\n  };\n}\nexport function finishQuiz() {\n  return {\n    type: FINISH_QUIZ,\n    activeQuestion: 0,\n    answerState: null,\n    isFinished: false,\n    results: {}\n  };\n}\nexport function quizNextQuestion(number) {\n  return {\n    type: QUIZ_NEXT_QUESTION,\n    number\n  };\n}\nexport function retryQuiz() {\n  return {\n    type: QUIZ_RETRY\n  };\n}\nexport function quizAnswerClick(answerId) {\n  return (dispatch, getState) => {\n    const state = getState().quiz;\n\n    if (state.answerState) {\n      const key = Object.keys(state.answerState)[0];\n\n      if (state.answerState[key] === 'sucsess') {\n        return;\n      }\n    }\n\n    const question = state.quiz[state.activeQuestion];\n    const results = state.results;\n\n    if (question.rightAnswerId === answerId) {\n      if (!results[question.id]) {\n        results[question.id] = 'sucsess';\n      }\n\n      dispatch(quizSetState({\n        [answerId]: 'sucsess'\n      }, results));\n      const timeout = window.setTimeout(() => {\n        if (isQuizFinished(state)) {\n          dispatch(finishQuiz());\n        } else {\n          dispatch(quizNextQuestion(state.activeQuestion + 1));\n        }\n\n        window.clearTimeout(timeout);\n      }, 1000);\n    } else {\n      results[question.id] = 'error';\n      dispatch(quizSetState({\n        [answerId]: 'error'\n      }, results));\n    }\n  };\n}\n\nfunction isQuizFinished(state) {\n  return state.activeQuestion + 1 === state.quiz.length;\n}","map":{"version":3,"sources":["/Users/sergeymac/Web/React application /react-quiz(redux)/src/store/actions/quiz.js"],"names":["axios","FETCH_QUIZES_START","FETCH_QUIZES_SUCCESS","FETCH_QUIZES_ERROR","FETCH_QUIZ_SUCCESS","QUIZ_SET_STATE","FINISH_QUIZ","QUIZ_NEXT_QUESTION","QUIZ_RETRY","fetchQuizes","dispatch","fetchQuizesStart","response","get","quizes","Object","keys","data","forEach","key","index","push","id","name","fetchQuizesSuccess","e","fetchQuizesError","fetchQuizById","quizId","quiz","fetchQuizSuccess","type","error","quizSetState","answerState","results","finishQuiz","activeQuestion","isFinished","quizNextQuestion","number","retryQuiz","quizAnswerClick","answerId","getState","state","question","rightAnswerId","timeout","window","setTimeout","isQuizFinished","clearTimeout","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,SACCC,kBADD,EAECC,oBAFD,EAGCC,kBAHD,EAICC,kBAJD,EAKCC,cALD,EAMCC,WAND,EAOCC,kBAPD,EAQCC,UARD,QASO,eATP;AAWA,OAAO,SAASC,WAAT,GAAuB;AAC7B,SAAO,MAAMC,QAAN,IAAkB;AACxBA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,cAAV,CAAvB;AAEA,YAAMC,MAAM,GAAG,EAAf;AAEAC,MAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAACK,IAArB,EAA2BC,OAA3B,CAAmC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/CN,QAAAA,MAAM,CAACO,IAAP,CAAY;AACRC,UAAAA,EAAE,EAAEH,GADI;AAERI,UAAAA,IAAI,EAAG,SAAQH,KAAK,GAAG,CAAE;AAFjB,SAAZ;AAIH,OALD;AAMAV,MAAAA,QAAQ,CAACc,kBAAkB,CAACV,MAAD,CAAnB,CAAR;AACH,KAZD,CAYG,OAAOW,CAAP,EAAU;AACTf,MAAAA,QAAQ,CAACgB,gBAAgB,CAACD,CAAD,CAAjB,CAAR;AACH;AAED,GAlBD;AAmBA;AAED,OAAO,SAASE,aAAT,CAAuBC,MAAvB,EAA+B;AACrC,SAAO,MAAMlB,QAAN,IAAkB;AACxBA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;;AAEA,QAAI;AACC,YAAMC,QAAQ,GAAI,MAAMZ,KAAK,CAACa,GAAN,CAAW,WAAUe,MAAO,OAA5B,CAAxB;AACA,YAAMC,IAAI,GAAGjB,QAAQ,CAACK,IAAtB;AAEAP,MAAAA,QAAQ,CAACoB,gBAAgB,CAACD,IAAD,CAAjB,CAAR;AACD,KALJ,CAKK,OAAOJ,CAAP,EAAU;AACVf,MAAAA,QAAQ,CAACgB,gBAAgB,CAACD,CAAD,CAAjB,CAAR;AACD;AACJ,GAXD;AAYA;AAED,OAAO,SAASK,gBAAT,CAA0BD,IAA1B,EAAgC;AACtC,SAAO;AACNE,IAAAA,IAAI,EAAE3B,kBADA;AAENyB,IAAAA;AAFM,GAAP;AAKA;AAED,OAAO,SAASlB,gBAAT,GAA4B;AAClC,SAAO;AACNoB,IAAAA,IAAI,EAAE9B;AADA,GAAP;AAGA;AAED,OAAO,SAASuB,kBAAT,CAA4BV,MAA5B,EAAoC;AAC1C,SAAO;AACNiB,IAAAA,IAAI,EAAE7B,oBADA;AAENY,IAAAA,MAAM,EAAEA;AAFF,GAAP;AAIA;AAED,OAAO,SAASY,gBAAT,CAA0BD,CAA1B,EAA6B;AACnC,SAAO;AACNM,IAAAA,IAAI,EAAE5B,kBADA;AAEN6B,IAAAA,KAAK,EAAEP;AAFD,GAAP;AAIA;AAED,OAAO,SAASQ,YAAT,CAAsBC,WAAtB,EAAmCC,OAAnC,EAA4C;AAClD,SAAO;AACNJ,IAAAA,IAAI,EAAE1B,cADA;AAEN6B,IAAAA,WAFM;AAEOC,IAAAA;AAFP,GAAP;AAIA;AAED,OAAO,SAASC,UAAT,GAAsB;AAC5B,SAAO;AACNL,IAAAA,IAAI,EAAEzB,WADA;AAEN+B,IAAAA,cAAc,EAAE,CAFV;AAGNH,IAAAA,WAAW,EAAE,IAHP;AAINI,IAAAA,UAAU,EAAE,KAJN;AAKNH,IAAAA,OAAO,EAAE;AALH,GAAP;AAOA;AAED,OAAO,SAASI,gBAAT,CAA0BC,MAA1B,EAAkC;AACxC,SAAO;AACNT,IAAAA,IAAI,EAAExB,kBADA;AAENiC,IAAAA;AAFM,GAAP;AAIA;AAED,OAAO,SAASC,SAAT,GAAqB;AAC3B,SAAO;AACNV,IAAAA,IAAI,EAAEvB;AADA,GAAP;AAGA;AAED,OAAO,SAASkC,eAAT,CAAyBC,QAAzB,EAAmC;AACzC,SAAO,CAACjC,QAAD,EAAWkC,QAAX,KAAwB;AAC9B,UAAMC,KAAK,GAAGD,QAAQ,GAAGf,IAAzB;;AACE,QAAIgB,KAAK,CAACX,WAAV,EAAuB;AACpB,YAAMf,GAAG,GAAGJ,MAAM,CAACC,IAAP,CAAY6B,KAAK,CAACX,WAAlB,EAA+B,CAA/B,CAAZ;;AACA,UAAIW,KAAK,CAACX,WAAN,CAAkBf,GAAlB,MAA2B,SAA/B,EAA0C;AACzC;AACA;AACH;;AAED,UAAM2B,QAAQ,GAAGD,KAAK,CAAChB,IAAN,CAAWgB,KAAK,CAACR,cAAjB,CAAjB;AACM,UAAMF,OAAO,GAAGU,KAAK,CAACV,OAAtB;;AAEN,QAAGW,QAAQ,CAACC,aAAT,KAA2BJ,QAA9B,EAAwC;AAEvC,UAAG,CAACR,OAAO,CAACW,QAAQ,CAACxB,EAAV,CAAX,EAA0B;AACzBa,QAAAA,OAAO,CAACW,QAAQ,CAACxB,EAAV,CAAP,GAAuB,SAAvB;AACA;;AAEDZ,MAAAA,QAAQ,CAACuB,YAAY,CAAC;AAAC,SAACU,QAAD,GAAY;AAAb,OAAD,EAA0BR,OAA1B,CAAb,CAAR;AAEA,YAAMa,OAAO,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;AAEvC,YAAIC,cAAc,CAACN,KAAD,CAAlB,EAA2B;AAC1BnC,UAAAA,QAAQ,CAAC0B,UAAU,EAAX,CAAR;AACA,SAFD,MAEO;AACN1B,UAAAA,QAAQ,CAAC6B,gBAAgB,CAACM,KAAK,CAACR,cAAN,GAAuB,CAAxB,CAAjB,CAAR;AACA;;AACDY,QAAAA,MAAM,CAACG,YAAP,CAAoBJ,OAApB;AACA,OARe,EAQb,IARa,CAAhB;AASA,KAjBD,MAiBO;AACNb,MAAAA,OAAO,CAACW,QAAQ,CAACxB,EAAV,CAAP,GAAuB,OAAvB;AACAZ,MAAAA,QAAQ,CAACuB,YAAY,CAAC;AAAC,SAACU,QAAD,GAAY;AAAb,OAAD,EAAwBR,OAAxB,CAAb,CAAR;AACA;AACH,GAjCD;AAmCA;;AAED,SAASgB,cAAT,CAAwBN,KAAxB,EAA+B;AAC9B,SAAOA,KAAK,CAACR,cAAN,GAAuB,CAAvB,KAA6BQ,KAAK,CAAChB,IAAN,CAAWwB,MAA/C;AACA","sourcesContent":["import axios from '../../axios/axios-quiz'\nimport {\n\tFETCH_QUIZES_START, \n\tFETCH_QUIZES_SUCCESS, \n\tFETCH_QUIZES_ERROR, \n\tFETCH_QUIZ_SUCCESS,\n\tQUIZ_SET_STATE,\n\tFINISH_QUIZ,\n\tQUIZ_NEXT_QUESTION,\n\tQUIZ_RETRY\n} from './actionTypes'\n\nexport function fetchQuizes() {\n\treturn async dispatch => {\n\t\tdispatch(fetchQuizesStart())\n\t\ttry {\n\t\t    const response = await axios.get('/quizes.json')\n\n\t\t    const quizes = []\n\n\t\t    Object.keys(response.data).forEach((key, index) => {\n\t\t        quizes.push({\n\t\t            id: key,\n\t\t            name: `Тест №${index + 1}`\n\t\t        })\n\t\t    })\n\t\t    dispatch(fetchQuizesSuccess(quizes))\n\t\t}  catch (e) {\n\t\t    dispatch(fetchQuizesError(e))\n\t\t}\n\n\t}\n}\n\nexport function fetchQuizById(quizId) {\n\treturn async dispatch => {\n\t\tdispatch(fetchQuizesStart())\n\n\t\ttry {\n    \t  const response =  await axios.get(`/quizes/${quizId}.json`)\n    \t  const quiz = response.data\n\n    \t  dispatch(fetchQuizSuccess(quiz))\n    \t} catch (e) {\n    \t  dispatch(fetchQuizesError(e))\n    \t}\n\t}\n}\n\nexport function fetchQuizSuccess(quiz) {\n\treturn {\n\t\ttype: FETCH_QUIZ_SUCCESS,\n\t\tquiz\n\t}\n\n}\n\nexport function fetchQuizesStart() {\n\treturn {\n\t\ttype: FETCH_QUIZES_START\n\t}\n}\n\nexport function fetchQuizesSuccess(quizes) {\n\treturn {\n\t\ttype: FETCH_QUIZES_SUCCESS,\n\t\tquizes: quizes\n\t}\n}\n\nexport function fetchQuizesError(e) {\n\treturn {\n\t\ttype: FETCH_QUIZES_ERROR,\n\t\terror: e\n\t}\n}\n\nexport function quizSetState(answerState, results) {\n\treturn {\n\t\ttype: QUIZ_SET_STATE,\n\t\tanswerState, results\n\t}\n}\n\nexport function finishQuiz() {\n\treturn {\n\t\ttype: FINISH_QUIZ,\n\t\tactiveQuestion: 0,\n\t\tanswerState: null,\n\t\tisFinished: false,\n\t\tresults: {}\n\t}\n}\n\nexport function quizNextQuestion(number) {\n\treturn {\n\t\ttype: QUIZ_NEXT_QUESTION,\n\t\tnumber\n\t}\n}\n\nexport function retryQuiz() {\n\treturn {\n\t\ttype: QUIZ_RETRY\n\t}\n}\n\nexport function quizAnswerClick(answerId) {\n\treturn (dispatch, getState) => {\n\t\tconst state = getState().quiz\n\t\t\t\tif (state.answerState) {\n\t\t\t\t\t  const key = Object.keys(state.answerState)[0]\n\t\t\t\t\t  if (state.answerState[key] === 'sucsess') {\n\t\t\t\t\t  \treturn\n\t\t\t\t\t  }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst question = state.quiz[state.activeQuestion]\n\t\t        const results = state.results\n\n\t\t\t\tif(question.rightAnswerId === answerId) {\n\n\t\t\t\t\tif(!results[question.id]) {\n\t\t\t\t\t\tresults[question.id] = 'sucsess'\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatch(quizSetState({[answerId]: 'sucsess'}, results))\n\n\t\t\t\t\tconst timeout = window.setTimeout(() => {\n\n\t\t\t\t\t\tif (isQuizFinished(state)) {\n\t\t\t\t\t\t\tdispatch(finishQuiz())   \n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdispatch(quizNextQuestion(state.activeQuestion + 1))\n\t\t\t\t\t\t}\n\t\t\t\t\t\twindow.clearTimeout(timeout)\n\t\t\t\t\t}, 1000)\n\t\t\t\t} else {\n\t\t\t\t\tresults[question.id] = 'error'\n\t\t\t\t\tdispatch(quizSetState({[answerId]: 'error'}, results))\n\t\t\t\t}\n\t}\n\n}\n\nfunction isQuizFinished(state) {\n\treturn state.activeQuestion + 1 === state.quiz.length\n}"]},"metadata":{},"sourceType":"module"}