{"ast":null,"code":"var _jsxFileName = \"/Users/sergeymac/Web/React application /react-quiz(redux)/src/containers/Quiz/Quiz.js\";\nimport React, { Component } from 'react';\nimport classes from './Quiz.module.scss';\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\nimport Loader from '../../components/UI/Loader/Loader';\nimport { connect } from 'react-redux';\nimport { fetchQuizById } from '../../store/actions/quiz';\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAnswerClickHandler = answerId => {\n      if (this.state.answerState) {\n        const key = Object.keys(this.state.answerState)[0];\n\n        if (this.state.answerState[key] === 'sucsess') {\n          return;\n        }\n      }\n\n      const question = this.state.quiz[this.state.activeQuestion];\n      const results = this.state.results;\n\n      if (question.rightAnswerId === answerId) {\n        if (!results[question.id]) {\n          results[question.id] = 'sucsess';\n        }\n\n        this.setState({\n          answerState: {\n            [answerId]: 'sucsess'\n          },\n          results\n        });\n        const timeout = window.setTimeout(() => {\n          if (this.isQuizFinished()) {\n            this.setState({\n              isFinished: true\n            });\n          } else {\n            this.setState({\n              activeQuestion: this.state.activeQuestion + 1,\n              answerState: null\n            });\n          }\n\n          window.clearTimeout(timeout);\n        }, 1000);\n      } else {\n        results[question.id] = 'error';\n        this.setState({\n          answerState: {\n            [answerId]: 'error'\n          },\n          results\n        });\n      }\n    };\n\n    this.retryHandler = () => {\n      this.setState({\n        activeQuestion: 0,\n        answerState: null,\n        isFinished: false,\n        results: {}\n      });\n    };\n  }\n\n  isQuizFinished() {\n    return this.state.activeQuestion + 1 === this.state.quiz.length;\n  }\n\n  componentDidMount() {\n    this.props.fetchQuizById(this.props.match.params.id);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Quiz,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.QuizWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 6\n      }\n    }, \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u044C\\u0442\\u0435 \\u043D\\u0430 \\u0432\\u0441\\u0435 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B\"), this.props.loading || !this.props.quiz ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }) : this.props.isFinished ? /*#__PURE__*/React.createElement(FinishedQuiz, {\n      results: this.props.results,\n      quiz: this.props.quiz,\n      onRetry: this.retryHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(ActiveQuiz, {\n      answers: this.props.quiz[this.props.activeQuestion].answers,\n      question: this.props.quiz[this.props.activeQuestion].question,\n      onAnswerClick: this.onAnswerClickHandler,\n      quizLength: this.props.quiz.length,\n      answerNumber: this.props.activeQuestion + 1,\n      state: this.props.answerState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    results: state.quiz.results,\n    isFinished: state.quiz.isFinished,\n    activeQuestion: state.quiz.activeQuestion,\n    answerState: state.quiz.answerState,\n    quiz: state.quiz.quiz,\n    loading: state.quiz.loading\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchQuizById: id => dispatch(fetchQuizById(id))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","map":{"version":3,"sources":["/Users/sergeymac/Web/React application /react-quiz(redux)/src/containers/Quiz/Quiz.js"],"names":["React","Component","classes","ActiveQuiz","FinishedQuiz","Loader","connect","fetchQuizById","Quiz","onAnswerClickHandler","answerId","state","answerState","key","Object","keys","question","quiz","activeQuestion","results","rightAnswerId","id","setState","timeout","window","setTimeout","isQuizFinished","isFinished","clearTimeout","retryHandler","length","componentDidMount","props","match","params","render","QuizWrapper","loading","answers","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport classes from './Quiz.module.scss'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\nimport Loader from '../../components/UI/Loader/Loader'\nimport {connect} from 'react-redux'\nimport {fetchQuizById} from '../../store/actions/quiz'\n\nclass Quiz extends Component {\n\n\tonAnswerClickHandler = (answerId) => {\n\n\t\tif (this.state.answerState) {\n\t\t\t  const key = Object.keys(this.state.answerState)[0]\n\t\t\t  if (this.state.answerState[key] === 'sucsess') {\n\t\t\t  \treturn\n\t\t\t  }\n\t\t}\n\t\t\n\n\t\tconst question = this.state.quiz[this.state.activeQuestion]\n        const results = this.state.results\n\n\t\tif(question.rightAnswerId === answerId) {\n\n\t\t\tif(!results[question.id]) {\n\t\t\t\tresults[question.id] = 'sucsess'\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tanswerState: {[answerId]: 'sucsess'},\n\t\t\t\tresults\n\t\t\t})\n\n\t\t\tconst timeout = window.setTimeout(() => {\n\n\t\t\t\tif (this.isQuizFinished()) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisFinished: true\n\t\t\t\t\t})     \n\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tactiveQuestion: this.state.activeQuestion + 1, \n\t\t\t\t\t\tanswerState: null\n\t\t\t\t\t})\n\n\t\t\t\t}\n\n\t\t\t\twindow.clearTimeout(timeout)\n\n\t\t\t}, 1000)\n\n\t\t\t\n\n\t\t} else {\n\t\t\tresults[question.id] = 'error'\n\t\t\tthis.setState({\n\t\t\t\tanswerState: {[answerId]: 'error'},\n\t\t\t\tresults\n\t\t\t})\n\t\t}\n\t}\n\n\tisQuizFinished() {\n\t\treturn this.state.activeQuestion + 1 === this.state.quiz.length\n\t}\n\n    retryHandler = () => {\n    \tthis.setState({\n    \t\tactiveQuestion: 0,\n    \t\tanswerState: null,\n    \t\tisFinished: false,\n    \t\tresults: {}\n    \t})\n    }\n     \n    componentDidMount() {\n    \tthis.props.fetchQuizById(this.props.match.params.id)\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={classes.Quiz}>\n\t\t\t <div className={classes.QuizWrapper}>\n\t\t\t  <h1>Ответьте на все вопросы</h1>\n\t\t\t  {\n\t\t\t  \tthis.props.loading || !this.props.quiz\n\t\t\t  \t? <Loader />\n\t\t\t  \t:   this.props.isFinished\n\t\t\t  \t    ? <FinishedQuiz \n                      results={this.props.results}\n                      quiz={this.props.quiz}\n                      onRetry={this.retryHandler}\n\t\t\t  \t      />\n\t\t\t  \t    : <ActiveQuiz\n\t\t\t          answers={this.props.quiz[this.props.activeQuestion].answers}\n\t\t\t          question={this.props.quiz[this.props.activeQuestion].question}\n\t\t\t          onAnswerClick={this.onAnswerClickHandler}\n\t\t\t          quizLength={this.props.quiz.length}\n\t\t\t          answerNumber={this.props.activeQuestion + 1}\n\t\t\t          state={this.props.answerState}\n\t\t\t          />    \n\t\t\t  }\t\t  \n\t\t\t </div>\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\tresults: state.quiz.results,\n\t\tisFinished: state.quiz.isFinished,\n\t\tactiveQuestion: state.quiz.activeQuestion,\n\t\tanswerState: state.quiz.answerState,\n\t\tquiz: state.quiz.quiz,\n\t\tloading: state.quiz.loading\n\n\t}\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\t\tfetchQuizById: id => dispatch(fetchQuizById(id))\n\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Quiz)"]},"metadata":{},"sourceType":"module"}